#!/usr/bin/python

import argparse
import os
import subprocess
import sys
import time
import operator
import re

parser = argparse.ArgumentParser(description='Process some integers.')
parser.add_argument('date', metavar='Timestamp', type=int, nargs='+',
                                        help='the date of pers')
parser.add_argument('classname', metavar='Fesa class name', nargs='+',
                                        help='the asdfas')
parser.add_argument('fecpostfix', metavar='t or f', nargs='+',
                                        help='the asdf asdfas')

args = parser.parse_args()
print "args = ", args
arg_date = args.date[0]
fesa_class_name = args.classname[0]
fec_postfix = args.fecpostfix[0]
print "date = ", arg_date
print "name = ", fesa_class_name
print "fecs = ", '_'+fec_postfix



#fecs = ["cfv-ux45-acsc"+str(c)+"b"+str(b)+"t" for c in range(1, 9) for b in range(1, 3)]
fecs = ["cfv-ux45-acsc"+str(cav)+"b"+str(beam)+fec_postfix for cav in range(1, 9) for beam in range(1, 3)] #test on one
src_path_pre = "./test/"
pf_name_xml = fesa_class_name+"PersistentData.xml"

for fec in fecs:
    print ""
    print "fec = ", fec
    print "-------------------------"
    pf_dir = os.path.join(src_path_pre, fec, 'data')
    pf_name_original_xml = os.path.join(pf_dir, pf_name_xml)

    p = subprocess.Popen(["ls", pf_dir], stdout=subprocess.PIPE)

    # Construct the dictionary of files-date pairs

    pf_dict = dict()
    while True:
        out = p.stdout.readline()
        if out == '' and p.poll() != None:
            break
        if out != '':
            #print "out = ", out
            
            m = re.search(pf_name_xml+'.(\d+).Z', out)
            if m:
                pf_name = out.rstrip('\n');
                pf_path = os.path.join(pf_dir, pf_name)
                pf_time_sec = os.path.getmtime(pf_path)
                t = time.localtime(pf_time_sec)
                d = time.strftime('%Y%m%d', t)
                #print "pf_path = ", pf_path, "\t\t", d, "a = ", args.date

                pf_dict[d] = pf_path



    # Sort the dict and search for the required date

    pf_sorted = reversed(sorted(pf_dict.items(), key=operator.itemgetter(0)))
    pf_found = list()
    for el in pf_sorted:
        #el:
        #('20150318', './test/cfv-ux45-acsc8b1t/data/ALLTunerControlPersistentData.xml.0.Z')
        #('20150317', './test/cfv-ux45-acsc8b1t/data/ALLTunerControlPersistentData.xml.1.Z')
        #...
        #print el
        if int(el[0]) > arg_date:
            continue

        pf_found.append(el)
        break
    #Found =  [('20150312', './test/cfv-ux45-acsc8b1t/data/ALLTunerControlPersistentData.xml.3.Z')]
    print "Found = ", pf_found

    # Do the replacement
    if len(pf_found) == 0:
        print "\n\nNo file found!"
        continue
    
    # Found pers. file (.Z)
    found_pf_date = pf_found[0][0]
    found_pf_name = pf_found[0][1]
    
    # Save a copy (just in case)
    
    curr_ts = time.strftime('%Y%m%d%H%M%S', time.localtime(time.time()))
    #Z-file
    found_pf_name_copy = found_pf_name+'_copy_'+curr_ts
    subprocess.call(["cp", found_pf_name, found_pf_name_copy]) #save Z-file
    print "\nCopied [", found_pf_name, "]"
    print "    to [", found_pf_name_copy, "]:"
    subprocess.call(["ls", "-la", found_pf_name_copy])

    #orig. file
    pf_name_original_copy  = pf_name_original_xml+'_copy_'+curr_ts
    subprocess.call(["cp", pf_name_original_xml, pf_name_original_copy]) #save current pers. file
    print "\nCopied [", pf_name_original_xml, "]"
    print "    to [", pf_name_original_copy, "]:"
    subprocess.call(["ls", "-la", pf_name_original_copy])
    
    # Unzip 
    print "\nUnzipped:"
    subprocess.call(["gzip", "-d", found_pf_name])
    unzipped_pf = found_pf_name.rstrip('.Z')
    subprocess.call(["ls", "-la", unzipped_pf])

    # Remove current file
    subprocess.call(["rm", "-i", pf_name_original_xml])

    # Move unzipped to current
    subprocess.call(["mv", "-i", unzipped_pf, pf_name_original_xml])
    

        
    


                
                
            



        







